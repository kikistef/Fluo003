/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.12 stef01.glb -k 
*/
import obj from './App.js'
import React, { useRef, useEffect, useState  } from 'react'
import { useGLTF, useAnimations  } from '@react-three/drei';

export function Model(props) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF('/StefTalkingIdle.glb');
  var [isAudioPlaying, setIsAudioPlaying] = useState(false);
	var [isTalking, setIsTalking] = useState(false);
	//console.log("isTalking : " + props.isTalking)
  //console.log('nodes:', nodes);
  // console.log('materials:', materials);
  // console.log('animations:', animations);

  // Make sure the useAnimations Hook is called unconditionally
  const { actions } = useAnimations(animations, group);
//////////////////////////////////////////////////////

  const handleAnimation = (animationName) => {
  let from = "idle";
  let to = animationName;

  if (actions[from] && actions[to]) {
    if (actions[from].isRunning()) {
      actions[from].fadeOut(1.0);
    }
    actions[to].reset().fadeIn(2.5).play();
  } else {
    console.error(`Action '${from}' or '${to}' is undefined.`);
    console.log('Available animations:', Object.keys(animations));
  }
  //console.log('animationName : ' + animationName);
};
//	console.log('App.js : ' + window.obj)

  const enableShadowsForChildren = (obj) => {
    if (obj.isMesh) {
      obj.castShadow = true;
      obj.receiveShadow = true;
    }

    if (obj.children) {
      obj.children.forEach((child) => {
        enableShadowsForChildren(child);
      });
    }
  };
////////////////////////////////
  useEffect(() => {
    handleAnimation(props.animationName);
  }, [props.animationName]);

  // Ajoutez cette useEffect pour surveiller l'état de l'audio
  useEffect(() => {
    if (isAudioPlaying) {
      // L'audio est en train de jouer, vous pouvez effectuer des actions ici si nécessaire
handleAnimation('idle-sad');
    } else {
      // L'audio a cessé de jouer, revenez à l'animation "idle"
      handleAnimation('idle');
//console.log('voix termine')
    }
  }, [isAudioPlaying]);

//enableShadowsForChildren(group.current);///////////////////////////////////////////////////////////Reprendre ICI///////////////////////////////
  useEffect(() => {
    if (group.current) { // Vérifiez que group.current est défini
      enableShadowsForChildren(group.current); // Appelez enableShadowsForChildren uniquement si group.current est défini
    }
  }, []);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature">
          <primitive object={nodes.Hips} />
          <skinnedMesh name="avaturn_body001" geometry={nodes.avaturn_body001.geometry} material={materials['avaturn_body_material.001']} skeleton={nodes.avaturn_body001.skeleton} />
          <skinnedMesh name="avaturn_hair_0001" geometry={nodes.avaturn_hair_0001.geometry} material={materials['avaturn_hair_0_material.001']} skeleton={nodes.avaturn_hair_0001.skeleton} />
          <skinnedMesh name="avaturn_look_0001" geometry={nodes.avaturn_look_0001.geometry} material={materials['avaturn_look_0_material.001']} skeleton={nodes.avaturn_look_0001.skeleton} />
          <skinnedMesh name="avaturn_shoes_0001" geometry={nodes.avaturn_shoes_0001.geometry} material={materials['avaturn_shoes_0_material.001']} skeleton={nodes.avaturn_shoes_0001.skeleton} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/StefTalkingIdle.glb')
